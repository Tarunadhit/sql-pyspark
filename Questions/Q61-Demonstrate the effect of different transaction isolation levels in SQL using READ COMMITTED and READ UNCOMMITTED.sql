/*
-- ‚ùì Question
Demonstrate the effect of different transaction isolation levels in SQL using READ COMMITTED and READ UNCOMMITTED.

-- üìä Sample Table(s)
CREATE TABLE Inventory (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(50),
    Stock INT
);

-- üìù Sample Data
| ProductID | ProductName | Stock |
|------------|--------------|--------|
| 1 | Laptop | 50 |
| 2 | Mouse | 200 |
*/
-- üí° Solution
-- üß† Transaction 1 (Session A)
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN TRANSACTION;
SELECT * FROM Inventory; -- Can see uncommitted (dirty) data
COMMIT;

-- ‚öôÔ∏è Transaction 2 (Session B)
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
BEGIN TRANSACTION;
UPDATE Inventory
SET Stock = Stock - 10
WHERE ProductID = 1; -- Still uncommitted

-- Transaction 1 can see this dirty data in READ UNCOMMITTED mode!
ROLLBACK;
/*
-- ‚úÖ Result (final view after rollback)
| ProductID | ProductName | Stock |
|------------|--------------|--------|
| 1 | Laptop | 50 |
| 2 | Mouse | 200 |

-- üéâ Explanation
- **READ UNCOMMITTED** ‚Üí Can see uncommitted changes (Dirty Reads üß®)
- **READ COMMITTED** ‚Üí Only reads committed data (Safe for production ‚úÖ)
- Isolation levels define how much one transaction is protected from others‚Äô changes.
- Higher levels like **REPEATABLE READ** and **SERIALIZABLE** offer more safety but less concurrency ‚öñÔ∏è.
*/
